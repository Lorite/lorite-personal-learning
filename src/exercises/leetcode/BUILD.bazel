package(default_visibility = ["//visibility:private"])

SRC_FOLDER_NAMES = glob(
    ["src"],
    exclude_directories = 0,
)

EXCLUDED_PROBLEMS = []

[cc_library(
    name = hpp_file.split("/")[-2].split(".")[0] + "_cpp",
    srcs = [
        hpp_file,
        hpp_file.replace(".hpp", ".cpp"),
    ],
    copts = [""],  # We can specify compiler options here like -std=c++11
    deps = [],
) for hpp_file in glob([src_folder + "/**/solution_cpp.hpp" for src_folder in SRC_FOLDER_NAMES]) if hpp_file.split("/")[-2].split(".")[0] not in EXCLUDED_PROBLEMS]

[cc_test(
    name = test_file.split("/")[-2].split(".")[0] + "_cpp_test",
    timeout = "short",
    srcs = [
        test_file,
    ],
    copts = [""],  # We can specify compiler options here like -std=c++11
    deps = [
        ":" + test_file.split("/")[-2].split(".")[0] + "_cpp",
        "@googletest//:gtest_main",
    ],
) for test_file in glob([src_folder + "/**/test_cpp.cpp" for src_folder in SRC_FOLDER_NAMES]) if test_file.split("/")[-2].split(".")[0] not in EXCLUDED_PROBLEMS]

[cc_binary(
    name = benchmark_file.split("/")[-2].split(".")[0] + "_cpp_benchmark",
    srcs = [
        benchmark_file,
    ],
    copts = [""],  # We can specify compiler options here like -std=c++11
    deps = [
        ":" + benchmark_file.split("/")[-2].split(".")[0] + "_cpp",
        "@google_benchmark//:benchmark",
    ],
) for benchmark_file in glob([src_folder + "/**/benchmark_cpp.cpp" for src_folder in SRC_FOLDER_NAMES]) if benchmark_file.split("/")[-2].split(".")[0] not in EXCLUDED_PROBLEMS]
