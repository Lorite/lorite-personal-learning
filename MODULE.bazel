###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################

# check https://registry.bazel.build/ for the latest versions

module(
    name = "lorite_ws",
)

# ----------------------------------------

# bazel

# http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# ----------------------------------------

# Linting and Formatting

bazel_dep(name = "aspect_bazel_lib", version = "2.11.0")  # Bazel library for common tasks required for linting and formatting
bazel_dep(name = "aspect_rules_lint", version = "1.0.8")  # linting and formatting
bazel_dep(name = "bazel_skylib", version = "1.7.1")  # Bazel Skylib required for linting and formatting
bazel_dep(name = "buildifier_prebuilt", version = "8.0.1")

# ----------------------------------------

# TypeScript

bazel_dep(name = "aspect_rules_ts", version = "3.4.0")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext")
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

# ----------------------------------------

# JavaScript

bazel_dep(name = "aspect_rules_js", version = "2.1.2")  # JavaScript rules required for linting and formatting

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",  # update using `bazel run -- @pnpm//:pnpm --dir $PWD install --lockfile-only`
    public_hoist_packages = {
        "typescript-eslint": [""],
    },
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

# ----------------------------------------

# C# - DotNet

bazel_dep(name = "rules_dotnet", version = "0.17.5")

dotnet = use_extension("@rules_dotnet//dotnet:extensions.bzl", "dotnet")
dotnet.toolchain(dotnet_version = "8.0.200")
use_repo(dotnet, "dotnet_toolchains")

register_toolchains("@dotnet_toolchains//:all")

# src/examples/bazel-test-project-csharp
bazel_test_project_csharp_example_deps = use_extension("//src/examples/bazel-test-project-csharp:example_deps.bzl", "bazel_test_project_csharp_example_deps")
use_repo(bazel_test_project_csharp_example_deps, "paket.bazel_test_project_csharp_example_deps")

# ----------------------------------------

# Python

bazel_dep(name = "rules_python", version = "1.1.0")

python_version = "3.13"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = python_version,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

# root
pip.parse(
    hub_name = "pip",
    python_version = python_version,
    requirements_lock = "//:requirements.txt",
)
use_repo(pip, "pip")

# src/examples/bazel-test-project-python-flask
pip.parse(
    hub_name = "pip_bazel_test_deps",
    python_version = python_version,
    requirements_lock = "//src/examples/bazel-test-project-python-flask:requirements.txt",
)
use_repo(pip, "pip_bazel_test_deps")

# src/subrepos/ultimate-python
pip.parse(
    hub_name = "pip_ultimate_python_deps",
    python_version = python_version,
    requirements_lock = "//src/subrepos/ultimate-python:requirements.txt",
)
use_repo(pip, "pip_ultimate_python_deps")

# src/other/python/scripts
pip.parse(
    hub_name = "pip_other_python_scripts_deps",
    python_version = python_version,
    requirements_lock = "//src/other/python/scripts:requirements.txt",
)
use_repo(pip, "pip_other_python_scripts_deps")

# ----------------------------------------

# C++ - Cpp

bazel_dep(name = "googletest", version = "1.15.2")  # testing
bazel_dep(name = "google_benchmark", version = "1.9.0")  # benchmark
bazel_dep(name = "gflags", version = "2.2.2")  # command line flags
bazel_dep(name = "glog", version = "0.7.1")  # logging
bazel_dep(name = "toolchains_llvm", version = "1.0.0")  # LLVM

# To directly use a commit from GitHub, replace commit with the commit you want.
# Otherwise, omit this block.
git_override(
    module_name = "toolchains_llvm",
    commit = "bb3f7d0171129e8f168f51f3deebdbe010e2bf00",
    remote = "https://github.com/bazel-contrib/toolchains_llvm",
)

# Configure and register the toolchain.
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_version = "18.1.8",  # look for an asset "clang+llvm-...-x86_64-linux-gnu-ubuntu-....tar.xz" in https://github.com/llvm/llvm-project/releases
)
use_repo(llvm, "llvm_toolchain")
use_repo(llvm, "llvm_toolchain_llvm")

register_toolchains("@llvm_toolchain//:all")

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    # Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
)

# ----------------------------------------

# JAVA

bazel_dep(name = "rules_java", version = "8.6.3")
bazel_dep(name = "rules_jvm_external", version = "6.6")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "org.junit.jupiter:junit-jupiter-engine:5.11.4",
        "org.scalameta:scalafmt-cli_2.13:3.8.4",
    ],
    fetch_sources = True,
    lock_file = "//:maven_install.json",  # update using `bazel run @maven//:pin`
    repositories = [
        "https://maven.google.com",
        "https://repo1.maven.org/maven2",
    ],
)
use_repo(maven, "maven")

# ----------------------------------------

# Rust

bazel_dep(name = "rules_rust", version = "0.56.0")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.75.0"],
)

# ----------------------------------------

# Protobuf

bazel_dep(name = "rules_buf", version = "0.3.0")

buf = use_extension("@rules_buf//buf:extensions.bzl", "buf")

# see https://github.com/bufbuild/buf/releases
buf.toolchains(version = "v1.34.0")
use_repo(buf, "rules_buf_toolchains")

# ----------------------------------------

# LaTeX

bazel_dep(name = "bazel_latex")
git_override(
    module_name = "bazel_latex",
    commit = "c552d5bd09e4e9e49040ede60dd97720acb1cbb7",
    patch_args = ["-p1"],
    patches = [
        "@//third_party/bazel-latex:0001-add-seqsplit-package-support.patch",
    ],
    remote = "https://github.com/ProdriveTechnologies/bazel-latex.git",
)

# Extra dependencies for linting not available in the Bazel registry
http_jar = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_jar")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

http_jar(
    name = "google-java-format",
    sha256 = "33068bbbdce1099982ec1171f5e202898eb35f2919cf486141e439fc6e3a4203",
    url = "https://github.com/google/google-java-format/releases/download/v1.17.0/google-java-format-1.17.0-all-deps.jar",
)

http_jar(
    name = "ktfmt",
    integrity = "sha256-l/x/vRlNAan6RdgUfAVSQDAD1VusSridhNe7TV4/SN4=",
    url = "https://repo1.maven.org/maven2/com/facebook/ktfmt/0.46/ktfmt-0.46-jar-with-dependencies.jar",
)

http_archive(
    name = "swiftformat",
    build_file_content = "filegroup(name = \"swiftformat\", srcs=[\"swiftformat_linux\"], visibility=[\"//visibility:public\"])",
    patch_cmds = ["chmod u+x swiftformat_linux"],
    sha256 = "f62813980c2848cb1941f1456a2a06251c2e2323183623760922058b98c70745",
    url = "https://github.com/nicklockwood/SwiftFormat/releases/download/0.49.17/swiftformat_linux.zip",
)

http_archive(
    name = "swiftformat_mac",
    build_file_content = "filegroup(name = \"swiftformat_mac\", srcs=[\"swiftformat\"], visibility=[\"//visibility:public\"])",
    patch_cmds = [
        # On MacOS, `xattr -c` clears the "Unknown developer" warning when executing a fetched binary
        "if command -v xattr > /dev/null; then xattr -c swiftformat; fi",
        "chmod u+x swiftformat",
    ],
    sha256 = "978eaffdc3716bbc0859aecee0d83875cf3ab8d8725779448f0035309d9ad9f3",
    url = "https://github.com/nicklockwood/SwiftFormat/releases/download/0.49.17/swiftformat.zip",
)

http_archive(
    name = "net_sourceforge_pmd",
    build_file_content = """java_import(name = "net_sourceforge_pmd", jars = glob(["*.jar"]), visibility = ["//visibility:public"])""",
    sha256 = "21acf96d43cb40d591cacccc1c20a66fc796eaddf69ea61812594447bac7a11d",
    strip_prefix = "pmd-bin-6.55.0/lib",
    url = "https://github.com/pmd/pmd/releases/download/pmd_releases/6.55.0/pmd-bin-6.55.0.zip",
)

http_jar(
    name = "com_puppycrawl_tools_checkstyle",
    sha256 = "51c34d738520c1389d71998a9ab0e6dabe0d7cf262149f3e01a7294496062e42",
    url = "https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.17.0/checkstyle-10.17.0-all.jar",
)

# fetch_vale = use_repo_rule("@aspect_rules_lint//lint:vale.bzl", "fetch_vale")
# fetch_vale()
http_file(
    name = "com_github_pinterest_ktlint",
    executable = True,
    sha256 = "2e28cf46c27d38076bf63beeba0bdef6a845688d6c5dccd26505ce876094eb92",
    url = "https://github.com/pinterest/ktlint/releases/download/1.2.1/ktlint",
)
